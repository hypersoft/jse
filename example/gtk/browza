#!/bin/jse

// Triston J. Taylor

// The final argument to me is the file, site or - to load...

var WebKit = new SharedLibrary('libwebkitgtk-3.0.so');
var Gtk = new SharedLibrary('libgtk-3.so');
var Gobj = new SharedLibrary('libgobject-2.0.so');

js.extend(js.type, {
	'GtkWidget *': js.type.pointer,
})

var gtk_init = Procedure(Gtk, 'int', "gtk_init", ['void *', 'void *']);
var gtk_main = Procedure(Gtk, 'int', 'gtk_main', []);
var gtk_main_quit = Procedure(Gtk, 'void', 'gtk_main_quit', []);

var gtk_window_new = Procedure(Gtk, 'GtkWidget *', "gtk_window_new", ['int']);
var gtk_window_set_default_size = Procedure(Gtk, 'void', 'gtk_window_set_default_size', ['void *', 'int', 'int']);
var gtk_window_set_position = Procedure(Gtk, 'void', 'gtk_window_set_position', ['void *', 'int']);

var gtk_widget_show_all = Procedure(Gtk, 'void', 'gtk_widget_show_all', ['void *']);

var gtk_scrolled_window_new = Procedure(Gtk, 'GtkWidget *', 'gtk_scrolled_window_new', ['void *', 'void *'])

var gtk_container_add = Procedure(WebKit, 'void', "gtk_container_add", ['pointer', 'pointer']);

var webkit_web_view_new = Procedure(WebKit, 'GtkWidget *', "webkit_web_view_new", []);
var webkit_web_view_load_uri = Procedure(WebKit, 'void', 'webkit_web_view_load_uri', ['void *', 'utf8 *']);
var webkit_web_settings_new = Procedure(WebKit, 'void *', 'webkit_web_settings_new', []);
var webkit_web_view_set_settings = Procedure(WebKit, 'void', 'webkit_web_view_set_settings', ['void *', 'void *']);
var webkit_web_view_set_transparent = Procedure(WebKit, 'void', 'webkit_web_view_set_transparent', ['void *', 'boolean']);
var webkit_web_view_load_string = Procedure(WebKit, 'void', 'webkit_web_view_load_string', ['void *', 'utf8 *', 'utf8 *', 'utf8 *', 'utf8 *']);

var g_object_set = function(obj, name, value, type) {
	setval = Procedure(Gobj, 'void', 'g_object_set', ['void *', 'utf8 *', (type == undefined)?'void *':type, 'void *']);
	setval(obj, name, value, NULL);
}

var G_CONNECT_SWAPPED = 1 << 1;
var GTK_WIN_POS_CENTER = 1;
var GTK_WINDOW_TOPLEVEL = 0;

var NULL = 0;
var TRUE = 1;
var FALSE = 0;

var g_signal_connect_data = Procedure(Gobj, 'ulong', 'g_signal_connect_data', [
	'pointer', 'utf8 *', 'pointer', 'pointer', 'pointer', 'int'
]);
var g_signal_connect = function(instance, detailed_signal, c_handler, data) {
	return g_signal_connect_data(instance, detailed_signal, c_handler, data, 0, 0);
}

var g_signal_connect_swapped = function(instance, detailed_signal, c_handler, data) {
	return g_signal_connect_data(instance, detailed_signal, c_handler, data, 0, G_CONNECT_SWAPPED);
}

gtk_init(0, 0);

/* Create the widgets */
window = gtk_window_new(GTK_WINDOW_TOPLEVEL);

g_signal_connect(window, "destroy", Gtk.find('gtk_main_quit'), NULL);

scroller = gtk_scrolled_window_new(NULL, NULL);
webView = webkit_web_view_new();
//webkit_web_view_set_transparent(webView, true);

settings = webkit_web_settings_new();

g_object_set(settings, "auto-resize-window", true);
g_object_set(settings, "enable-accelerated-compositing", true);
g_object_set(settings, "enable-css-shaders", true);
g_object_set(settings, "enable-dom-paste", true);
g_object_set(settings, "enable-file-access-from-file-uris", true);
g_object_set(settings, "enable-fullscreen", true);
g_object_set(settings, "enable-smooth-scrolling", true);
g_object_set(settings, "enable-spatial-navigation", true);
g_object_set(settings, "enable-universal-access-from-file-uris", true);
g_object_set(settings, "enable-webaudio", true);
g_object_set(settings, "javascript-can-access-clipboard", true);
g_object_set(settings, "javascript-can-open-windows-automatically", true);

webkit_web_view_set_settings(webView, settings);

/* Place the WebKitWebView in the GtkScrolledWindow */
gtk_container_add(scroller, webView);
gtk_container_add(window, scroller);

// The final argument is the file or input to load...
var file = (js.run.argc > 2)?String.fromUTF8(Address(js.run.argv, 'utf8 *', js.run.argc)[js.run.argc - 1]):"-";
var mime = "text/html";

/* Open a webpage */
if (file == '-') {
	var cat = Command('cat'); cat.capture.output = true;
	webkit_web_view_load_string(webView, cat(), mime, NULL, js.env.cwd());
} else webkit_web_view_load_uri (webView, file);

/* Show the result */
gtk_window_set_default_size(window, 800, 476);
gtk_window_set_position(window, GTK_WIN_POS_CENTER);
gtk_widget_show_all(window);

gtk_main();

