#!bin/jse

// YOU SHOULD BE RUNNING THIS FILE FROM THE JSE PROJECT'S ROOT DIRECTORY.

// 16bit PCM Trinaural host encoded WaveForm generator

// This DEMO will build the included libwaveform.c into a library, load it, and output
// a 3 channel 16bit host encoded PCM binaural beat sampled at 44100 hz.

// The demo will then delete the compiled library and exit.

// You may import the PCM stream into an application such as audacity,
// or pipe it into a raw PCM stream filter such as:

// example/pcm/wavegen | aplay -f s16_le -r 44100 -c3

// Excercise: extend the demo to allow supply of your own parameters to the
// stream generator via command line.

var double = native.type.double;
var short = native.type.short;
var size_t = native.type.size;
var string = native.type.utf8.pointer;
var int = native.type.int;

var WaveForm = native.type.pointer;
var FILE = native.type.pointer;

var stdout = native.engine.find('stdout').toAddress(FILE);
var stderr = native.engine.find('stderr').toAddress(FILE);
var fputs = new Procedure(native.engine, int, 'fputs', [string, FILE]);

var buildLibWaveForm = new Command('gcc', '-shared', '-Wl,-soname,libwaveform.so', '-o', 'bin/libwaveform.so', 'example/pcm/waveform.c', '-lc');

if (buildLibWaveForm() == false) {
	exit(1);
} else {

	var libwaveform = new SharedLibrary('bin/libwaveform.so');

	var new_wave_form = new Procedure(libwaveform, WaveForm, 'new_wave_form', [double, double]);
	var wave_form_free = new Procedure(libwaveform, 'void', 'wave_form_free', [WaveForm]);
	var wave_form_sample = new Procedure(libwaveform, short, 'wave_form_sample', [WaveForm, double]);
	var wave_form_mix_samples = new Procedure(libwaveform, short, 'wave_form_mix_samples', [short, short]);
	var wave_form_sample_write = new Procedure(libwaveform, 'void', 'wave_form_sample_write', [WaveForm, double, FILE]);
	var wave_form_stream_sample = new Procedure(libwaveform, 'void', 'wave_form_stream_sample', [WaveForm, double, size_t, FILE]);
	var wave_form_stream_mix = new Procedure(libwaveform, 'void', 'wave_form_stream_mix', [double, size_t, FILE, string, '...']);
	var wave_form_buffer = new Procedure(libwaveform, WaveForm, 'wave_form_buffer', [WaveForm, double, size_t]);
	var wave_buffer_free = new Procedure(libwaveform, 'void', 'wave_buffer_free', [WaveForm]);

	function BinauralBeat(carrier, freq, amp) {
		if (arguments.length == 1) { // try to parse sbagen style
			var rx = /^([0-9\.]+)[+-]([0-9\.]+)\/([0-9\.]+)/;
			var xpm;
			if ((xpm = rx.exec(carrier)) != null) {
				carrier = xpm[1], freq = xpm[2], amp = xpm[3];
			} else throw new TypeError("Unable to parse sbagen style binaural beat");
		}
		js.extend(this, {
			left: new_wave_form(carrier, amp), right: new_wave_form(carrier - freq, amp),
			center: new_wave_form(freq, amp * 1.25)
		});
	}
	BinauralBeat.prototype = {
		free:function(){
			wave_form_free(this.left); wave_form_free(this.right); wave_form_free(this.center);
		}
	}

	// These are allocated native structures
	var theta = new BinauralBeat("51.91+6.65/20");  		// G#1 carrier
	var gammaLo = new BinauralBeat(830.61, 41.5, 120); 	// G#5 carrier
	var gammaHi = new BinauralBeat(415.30, 83.1, 140); 		// G5 carrier

	// The above WaveForms were created by matching the target beat frequency range
	// with the wave height of standard music notes.

	// example/pcm/musicnotefreqs-suits-phy.mtu.edu.pdf

	// My theory on amplitude is simple. Match the amplitude with the desried
	// intensity (relative to to other environmental samples). This audio should be mixed in
	// as barely audible ambient noise with music that you enjoy which promotes,
	// critical thinking and analysis. Typically classical music/easy listening/jazz.
	// but even death metal at a proper co-amplitude can promote the type of stimulus required.

	// the following procedure can accept 4 format parameters:

	// w - WaveForm a sine wave descriptor
	// m - Mix WaveForm descriptor sample with next output sample before streaming (cumulative, clipped)
	// b - Buffer'd WaveForm that cuts off when the data runs out
	// l - Buffer'd WaveForm that loops when the data runs out

	wave_form_stream_mix(2240, 44100, stdout, "mmwmmwmmw",
		theta.left, gammaLo.left, gammaHi.left,
		theta.right, gammaLo.right, gammaHi.right,
		theta.center, gammaLo.center, gammaHi.center
	); // 2240 seconds @ 44100 samples per second

	native.address.free(theta, gammaLo, gammaHi);

}

new Command('rm', 'bin/libwaveform.so')();
