#!bin/jse

// YOU SHOULD BE RUNNING THIS FILE FROM THE JSE PROJECT'S ROOT DIRECTORY.

// 16bit PCM host encoded WaveForm generator

// This DEMO will build the included libwaveform.c into a library, load it, and output
// a 3 channel 16bit host encoded PCM binaural beat sampled at 44100 hz.

// The demo will then delete the compiled library and exit.

// You may import the PCM stream into an application such as audacity,
// or pipe it into a raw PCM stream filter such as:

// example/pcm/wavegen | aplay -f s16_le -r 44100 -c3

// Excercise: extend the demo to allow supply of your own parameters to the
// stream generator via command line.

var double = native.type.double;
var short = native.type.short;
var size_t = native.type.size;
var string = native.type.utf8.pointer;
var int = native.type.int;

var WaveForm = native.type.pointer;
var FILE = native.type.pointer;

var stdout = native.engine.find('stdout').toAddress(FILE);
var stderr = native.engine.find('stderr').toAddress(FILE);
var fputs = new Procedure(native.engine, int, 'fputs', [string, FILE]);

var buildLibWaveForm = new Command('gcc', '-shared', '-Wl,-soname,libwaveform.so', '-o', 'bin/libwaveform.so', 'example/pcm/waveform.c', '-lc');

if (buildLibWaveForm() == false) {
	exit(1);
} else {

	var libwaveform = new SharedLibrary('bin/libwaveform.so');

	var new_wave_form = new Procedure(libwaveform, WaveForm, 'new_wave_form', [double, double]);
	var wave_form_free = new Procedure(libwaveform, 'void', 'wave_form_free', [WaveForm]);
	var wave_form_sample = new Procedure(libwaveform, short, 'wave_form_sample', [WaveForm, double]);
	var wave_form_mix_samples = new Procedure(libwaveform, short, 'wave_form_mix_samples', [short, short]);
	var wave_form_sample_write = new Procedure(libwaveform, 'void', 'wave_form_sample_write', [WaveForm, double, FILE]);
	var wave_form_stream_sample = new Procedure(libwaveform, 'void', 'wave_form_stream_sample', [WaveForm, double, size_t, FILE]);
	var wave_form_stream_mix = new Procedure(libwaveform, 'void', 'wave_form_stream_mix', [double, size_t, FILE, string, '...']);
	var wave_form_buffer = new Procedure(libwaveform, WaveForm, 'wave_form_buffer', [WaveForm, double, size_t]);
	var wave_buffer_free = new Procedure(libwaveform, 'void', 'wave_buffer_free', [WaveForm]);

	var left = new_wave_form(420, 15000); // 420 hz; 15,000 amplitude (48%)
	var right = new_wave_form(416.8, 15000); // 416 hz; 15,000 amplitude (48%)
	var center = new_wave_form(4.2, 25000); // 4.2 hz; 15,000 amplitude (48%)

	// this is a buffer'd loop of .2 seconds that is used as an overlay to
	// make the target binaural beat frequency more prominent.
	var buffer = wave_form_buffer(center, 0.2, 44100);

	// this procedure can accept 3 format parameters:
	// w - WaveForm a sine wave descriptor
	// b - Buffer'd WaveForm that cuts off when the data runs out
	// l - Buffer'd WaveForm that loops when the data runs out
	wave_form_stream_mix(60, 44100, stdout, "wwl", left, right, buffer); // 60 seconds @ 44100 samples per second

	wave_form_free(left);
	wave_form_free(right);
	wave_form_free(center);
	wave_buffer_free(buffer);

}

new Command('rm', 'bin/libwaveform.so')();
